package sistemas.tallerpoo.visual;

import javax.swing.JOptionPane;
import sistemas.tallerpoo.clasesLogicas.ControlRoles;
import sistemas.tallerpoo.clasesLogicas.Rol;

/**
 * Ventana principal del sistema. Esta ventana contiene la interfaz principal
 * del programa.
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Constructor que inicializa la interfaz principal. Crea y muestra la
     * ventana principal del sistema.
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jmCerrarSesion = new javax.swing.JMenuItem();
        jmRegistrar = new javax.swing.JMenuItem();
        jmSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jmRegistroFuncionario = new javax.swing.JMenuItem();
        jmRoles = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jmListaEspera = new javax.swing.JMenuItem();
        jmVerBoxes = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        mHistoriaClinica = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jmEstadisticas = new javax.swing.JMenuItem();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu5.setText("Usuario");

        jmCerrarSesion.setText("Cerrar Sesion");
        jmCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCerrarSesionActionPerformed(evt);
            }
        });
        jMenu5.add(jmCerrarSesion);

        jmRegistrar.setText("Registrar");
        jmRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmRegistrarActionPerformed(evt);
            }
        });
        jMenu5.add(jmRegistrar);

        jmSalir.setText("Salir");
        jmSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSalirActionPerformed(evt);
            }
        });
        jMenu5.add(jmSalir);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("Pacientes");

        jMenuItem1.setText("Registro");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Medicos");

        jMenuItem2.setText("Registro");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Especialidades");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Triage");

        jMenuItem4.setText("Realizar Triage");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuBar1.add(jMenu4);

        jMenu6.setText("Funcionarios");

        jmRegistroFuncionario.setText("Registro");
        jmRegistroFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmRegistroFuncionarioActionPerformed(evt);
            }
        });
        jMenu6.add(jmRegistroFuncionario);

        jmRoles.setText("Roles");
        jmRoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmRolesActionPerformed(evt);
            }
        });
        jMenu6.add(jmRoles);

        jMenuBar1.add(jMenu6);

        jMenu8.setText("Atención");

        jmListaEspera.setText("Lista espera");
        jmListaEspera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmListaEsperaActionPerformed(evt);
            }
        });
        jMenu8.add(jmListaEspera);

        jmVerBoxes.setText("Ver boxes");
        jmVerBoxes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmVerBoxesActionPerformed(evt);
            }
        });
        jMenu8.add(jmVerBoxes);

        jMenuBar1.add(jMenu8);

        jMenu9.setText("Historia Clinica");

        mHistoriaClinica.setText("Ver Historias Clinicas");
        mHistoriaClinica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mHistoriaClinicaActionPerformed(evt);
            }
        });
        jMenu9.add(mHistoriaClinica);

        jMenuBar1.add(jMenu9);

        jMenu7.setText("Gestores");

        jmEstadisticas.setText("Estadísticas");
        jmEstadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmEstadisticasActionPerformed(evt);
            }
        });
        jMenu7.add(jmEstadisticas);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 649, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acciones realizadas al seleccionar la opción 1 en el menú.
     *
     * Si el usuario no tiene los roles 'Medico' y 'Admision de Pacientes',
     * muestra un mensaje de error y detiene la ejecución. En caso contrario,
     * muestra la ventana para registrar un nuevo paciente.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Medico")) && !ControlRoles.usuarioTieneRol(new Rol("Admision de Pacientes"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        RegistroPaciente pac = new RegistroPaciente();
        pac.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción 2 en el menú.
     *
     * Si el usuario no tiene los roles 'Registros Medicos', 'Gestion' y
     * 'Recursos Humanos', muestra un mensaje de error y detiene la ejecución.
     * En caso contrario, muestra la ventana para registrar un nuevo médico.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Registros Medicos")) && !ControlRoles.usuarioTieneRol(new Rol("Gestion")) && !ControlRoles.usuarioTieneRol(new Rol("Recursos Humanos"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }

        RegistroMedico m = new RegistroMedico();
        m.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción 3 en el menú.
     *
     * Si el usuario no tiene los roles 'Registros Medicos' y 'Gestion', muestra
     * un mensaje de error y detiene la ejecución. En caso contrario, muestra la
     * ventana para administrar las especialidades médicas.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Registros Medicos")) && !ControlRoles.usuarioTieneRol(new Rol("Gestion"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }

        EspecialidadesMedico esp = new EspecialidadesMedico();
        esp.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción 4 en el menú.
     *
     * Si el usuario no tiene los roles 'Medico' y 'Admision de Pacientes',
     * muestra un mensaje de error y detiene la ejecución. En caso contrario,
     * muestra la ventana para realizar el triage de un paciente.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Medico")) && !ControlRoles.usuarioTieneRol(new Rol("Admision de Pacientes"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        RealizarTriage t = new RealizarTriage();
        t.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de cerrar sesión en el menú.
     * Establece el usuario actual como nulo, muestra la ventana de inicio de
     * sesión y cierra la ventana actual.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCerrarSesionActionPerformed
        ControlRoles.setUsuarioActual(null);
        Login l = new Login();
        l.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jmCerrarSesionActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de registrar en el menú.
     * Verifica los roles del usuario y muestra la ventana de registro de
     * usuario en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmRegistrarActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Administrador de Sistema")) && !ControlRoles.usuarioTieneRol(new Rol("Informatica"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        RegistroUsuario reg = new RegistroUsuario();
        reg.setVisible(true);
    }//GEN-LAST:event_jmRegistrarActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de salir en el menú. Cierra
     * la ventana actual.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jmSalirActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de registro de funcionario
     * en el menú. Verifica los roles del usuario y muestra la ventana de
     * registro de funcionario en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmRegistroFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmRegistroFuncionarioActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Administrador de Sistema")) && !ControlRoles.usuarioTieneRol(new Rol("Gestion")) && !ControlRoles.usuarioTieneRol(new Rol("Recursos Humanos"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        RegistroFuncionario fun = new RegistroFuncionario();
        fun.setVisible(true);
    }//GEN-LAST:event_jmRegistroFuncionarioActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de lista de espera en el
     * menú. Verifica si el usuario tiene el rol 'Medico' y muestra la ventana
     * de la lista de espera en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmListaEsperaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmListaEsperaActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Medico"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        new ListaEspera().setVisible(true);
    }//GEN-LAST:event_jmListaEsperaActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de ver boxes en el menú.
     * Verifica si el usuario tiene el rol 'Medico' y muestra la ventana de
     * Atención en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */

    private void jmVerBoxesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmVerBoxesActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Medico"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        new Atencion().setVisible(true);
    }//GEN-LAST:event_jmVerBoxesActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de historia clínica en el
     * menú. Verifica si el usuario tiene los roles adecuados y muestra la
     * ventana de Formulario de Historia Clínica en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void mHistoriaClinicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mHistoriaClinicaActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Medico")) && !ControlRoles.usuarioTieneRol(new Rol("Admision de Pacientes")) && !ControlRoles.usuarioTieneRol(new Rol("Gestion")) && !ControlRoles.usuarioTieneRol(new Rol("Registros Medicos"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }

        new FormularioHistoriaClinica().setVisible(true);
    }//GEN-LAST:event_mHistoriaClinicaActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de roles en el menú.
     * Verifica si el usuario tiene el rol 'Administrador de Sistema' y muestra
     * la ventana de Roles del Funcionario en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmRolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmRolesActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Administrador de Sistema"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        new RolesFuncionario().setVisible(true);
    }//GEN-LAST:event_jmRolesActionPerformed

    /**
     * Acciones realizadas al seleccionar la opción de estadísticas en el menú.
     * Verifica si el usuario tiene el rol 'Gestion' y muestra la ventana de
     * Análisis Gestor en caso de tener permisos.
     *
     * @param evt Evento que representa la acción de seleccionar la opción del
     * menú.
     */
    private void jmEstadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmEstadisticasActionPerformed
        if (!ControlRoles.usuarioTieneRol(new Rol("Gestion"))) {
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta función");
            return;
        }
        new AnalisisGestor().setVisible(true);
    }//GEN-LAST:event_jmEstadisticasActionPerformed

    /**
     * El método main es el punto de entrada del programa. Inicializa la ventana
     * de Principal.
     *
     * @param args Los argumentos de la línea de comandos.
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jmCerrarSesion;
    private javax.swing.JMenuItem jmEstadisticas;
    private javax.swing.JMenuItem jmListaEspera;
    private javax.swing.JMenuItem jmRegistrar;
    private javax.swing.JMenuItem jmRegistroFuncionario;
    private javax.swing.JMenuItem jmRoles;
    private javax.swing.JMenuItem jmSalir;
    private javax.swing.JMenuItem jmVerBoxes;
    private javax.swing.JMenuItem mHistoriaClinica;
    // End of variables declaration//GEN-END:variables
}
