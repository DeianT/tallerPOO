package sistemas.tallerpoo.visual;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemas.tallerpoo.clasesLogicas.Admision;
import sistemas.tallerpoo.clasesLogicas.ControlRoles;
import sistemas.tallerpoo.clasesLogicas.HistoriaClinica;
import sistemas.tallerpoo.datos.AdmisionDatos;
import sistemas.tallerpoo.datos.BoxDatos;
import sistemas.tallerpoo.datos.HistoriaClinicaDatos;

/**
 * Clase que representa la ventana principal para la gestión de la atención a
 * los pacientes. Proporciona la interfaz gráfica con funcionalidades para la
 * gestión de las admisiones de los pacientes. La clase incluye funcionalidades
 * para mostrar la lista de admisiones, permitiendo acciones como dar de alta a
 * un paciente, visualizar la historia clínica, etc. Utiliza elementos de las
 * clases de datos `AdmisionDatos` y `HistoriaClinicaDatos`.
 */
public class Atencion extends javax.swing.JFrame {

    private DefaultTableModel modelo;
    private ArrayList<Admision> listaAdmision;
    private AdmisionDatos datos = new AdmisionDatos();
    private Admision admision = null;
    private final String[] lugaresAtencion = {"Consultorio", "Emergencia", "Internaciones"};

    /**
     * Constructor de la clase. Inicializa la interfaz y la ubicación de la
     * ventana. Se encarga de instanciar un modelo de tabla y listar las
     * admisiones.
     */
    public Atencion() {
        initComponents();
        this.setLocationRelativeTo(null);
        modelo = new DefaultTableModel();
        listar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtAdmisiones = new javax.swing.JTable();
        btnAlta = new javax.swing.JButton();
        btnHistoriaClinica = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtAdmisiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Box", "Nivel triage", "Motivo", "Ingreso", "DNI", "Nombre", "Apellido", "Fecha de Nacimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtAdmisiones);

        btnAlta.setText("Dar de alta");
        btnAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAltaActionPerformed(evt);
            }
        });

        btnHistoriaClinica.setText("Historia clínica");
        btnHistoriaClinica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoriaClinicaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(426, Short.MAX_VALUE)
                .addComponent(btnHistoriaClinica)
                .addGap(56, 56, 56)
                .addComponent(btnAlta)
                .addGap(48, 48, 48))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(40, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(462, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlta)
                    .addComponent(btnHistoriaClinica))
                .addGap(16, 16, 16))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(55, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción realizada al presionar el botón "Alta" en la interfaz. Obtiene la
     * fila seleccionada en la tabla de admisiones. Si no se ha seleccionado una
     * admisión, muestra un mensaje de error indicando que no se ha seleccionado
     * ningún paciente. En caso contrario, accede a la admisión seleccionada,
     * establece el estado de alta, realiza la edición de la admisión y reduce
     * la cantidad de pacientes en el box asociado. Luego, solicita información
     * al usuario mediante diálogos para ingresar el diagnóstico, el lugar de
     * atención y el resultado de estudios. Se valida que se ingrese información
     * válida en los diálogos. Finalmente, registra esta información en la base
     * de datos como Historia Clínica y actualiza la lista de admisiones.
     * Muestra un mensaje indicando que el paciente fue dado de alta.
     *
     * @param evt Evento de acción asociado al botón "Alta".
     */
    private void btnAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAltaActionPerformed
        int fila = jtAdmisiones.getSelectedRow();
        try {
            admision = listaAdmision.get(fila);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ningún paciente seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        admision.setDadaDeAlta(true);
        datos.editarAdmision(admision);
        //reducir la cantidad de pacientes en el box
        new BoxDatos().ocuparDesocupar(admision.getBox().getNumero(), false);//esto posiblemente haya que modificar

        String diagnostico = JOptionPane.showInputDialog(null, "Ingrese el diagnóstico");
        while (diagnostico == null || diagnostico.isEmpty()) {
            diagnostico = JOptionPane.showInputDialog(null, "Ingrese el diagnóstico");
        }

        int l = JOptionPane.showOptionDialog(null, "Indique el lugar de atención", "Confirmacion", 0, JOptionPane.QUESTION_MESSAGE, null, lugaresAtencion, "Terminar");
        while (l == -1) {
            l = JOptionPane.showOptionDialog(null, "Indique el lugar de atención", "Confirmacion", 0, JOptionPane.QUESTION_MESSAGE, null, lugaresAtencion, "Terminar");
        }
        String lugar = lugaresAtencion[l];

        String diagnosticoClinico = JOptionPane.showInputDialog(null, "Ingrese el resultado de estudios");
        while (diagnosticoClinico == null || diagnosticoClinico.isEmpty()) {
            diagnosticoClinico = JOptionPane.showInputDialog(null, "Ingrese el resultado de estudios");
        }

        Date fechita = new Date();
        SimpleDateFormat formatofecha = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formatohora = new SimpleDateFormat("HH:mm");
        String fecha = formatofecha.format(fechita);
        String hora = formatohora.format(fechita);

        HistoriaClinica h = new HistoriaClinica();
        h.setDniPaciente(admision.getPaciente().getDni());
        h.setDniMedico(ControlRoles.getUsuarioActual().getDniFuncionario());
        h.setFecha(fecha);
        h.setHora(hora);
        h.setDiagnostico(diagnostico);
        h.setLugar(lugar);
        h.setDiagnosticoClinico(diagnosticoClinico);

        new HistoriaClinicaDatos().agregarHistoriaClinica(h);

        listar();
        JOptionPane.showMessageDialog(null, "El paciente fue dado de alta");
    }//GEN-LAST:event_btnAltaActionPerformed

    /**
     * Acción realizada al presionar el botón "Historia Clínica" en la interfaz.
     * Obtiene la fila seleccionada en la tabla de admisiones. Si no se ha
     * seleccionado una admisión, muestra un mensaje de error indicando que no
     * se ha seleccionado ningún paciente. En caso contrario, obtiene la
     * admisión seleccionada y abre un nuevo formulario de Historia Clínica
     * relacionado al paciente asociado a esa admisión. Si no hay un paciente
     * seleccionado, muestra un mensaje de error.
     *
     * @param evt Evento de acción asociado al botón "Historia Clínica".
     */
    private void btnHistoriaClinicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoriaClinicaActionPerformed
        int fila = jtAdmisiones.getSelectedRow();
        try {//controla que haya una admisión seleccionada
            admision = listaAdmision.get(fila);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ningún paciente seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        new FormularioHistoriaClinica(admision.getPaciente().getDni()).setVisible(true);
    }//GEN-LAST:event_btnHistoriaClinicaActionPerformed

    /**
     * El método main es el punto de entrada del programa. Inicializa la ventana de Atencion.
     *
     * @param args Los argumentos de la línea de comandos.
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Atencion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlta;
    private javax.swing.JButton btnHistoriaClinica;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtAdmisiones;
    // End of variables declaration//GEN-END:variables

    private void listar() {
        listaAdmision = datos.admisionesNoDadasDeAlta();
        limpiarTabla();
        modelo = (DefaultTableModel) jtAdmisiones.getModel();
        Object[] ob = new Object[8];

        for (int i = 0; i < listaAdmision.size(); i++) {
            ob[0] = listaAdmision.get(i).getBox().getNumero();
            ob[1] = listaAdmision.get(i).getTriage().getColorModificado();
            ob[2] = listaAdmision.get(i).getMotivo();
            ob[3] = listaAdmision.get(i).getFecha() + " " + listaAdmision.get(i).getHora();
            ob[4] = listaAdmision.get(i).getPaciente().getDni();
            ob[5] = listaAdmision.get(i).getPaciente().getNombre();
            ob[6] = listaAdmision.get(i).getPaciente().getApellido();
            ob[7] = listaAdmision.get(i).getPaciente().getFechaNacimiento();
            modelo.addRow(ob);
        }
        jtAdmisiones.setModel(modelo);
    }

    private void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i--);
        }
    }
}
